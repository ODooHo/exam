캐시에 넣어야하는데, 자리가 없네?
그럼 기존에 있던 애들을 교체해줘야함.

  3. 교체 알고리즘
: 캐시 히트율을 극대화할 수 있도록 교체할 블록을 선택하기 위한 알고리즘
 ·LRU(Least Recently Used): 가장 오래전에 사용된 것.
 ·FIFO: 사용여부 상관 없이 적재된 지 가장 오래된 것
 ·LFU: 참조 횟수가 가장 적은 것
 ·Random: 아무거나 임의로 선택함

332p. 예제 6-9 잘못됨.
갑자기 2가 0으로 바뀜 ㄷㄷ;

·Write-through
: 모든 쓰기 동작이 캐시와 주기억 장치에 동시에 수행됨. 
 
·Write-back
주기억 장치는 느리니까 일단 캐시에 쓰고 다시 돌아오자. = 캐시에서 데이터가 변경되어도 주기억 장치에는 갱신되지 않는 방식 (빚 지는 것)

	각 방식의 장단점
 ·Write-through
장점: 안전하다
단점: 느리다
 ·Write-back
장점: 쓰기 동작의 횟수가 최소화되고, 시간이 짧음
단점: 캐시의 내용과 주기억 장치의 내용이 서로 다르다 -> '블록을 교체할 때 문제가 된다.'
=> 블록을 교체할 때 캐시의 상태를 확인하여 주기억 장치에 갱신하는 동작이 선행되어야 하며, 이를 위해 '상태 비트'를 가지고 있어야 함!


  5. 라인 크기


  6. 캐시 수
-계층적 캐시
 · 온-칩 캐시: cpu 칩 내에 포함
 ·계층적 캐시: 온-칩 캐시를 1차 캐시로 사용하고, cpu 외부에 더 큰 용량의 2차 캐시를 설치
 ·분리 캐시: 캐시를 명령어 캐시와 데이터 캐시로 분리

계층적 캐시에서의 히트율
 	시험 안나옴 ㄷㄷ;
