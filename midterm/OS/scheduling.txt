도착 순서		도착 시간		작업 시간
p1		0		30
p2		3		18
p3		6		9
fcfs	대기 시간		반환 시간		평균 대기 시간	
p1	0		30		(0+27+42)/3=23		
p2	27		45
p3	42		51
fcfs -> 콘보이 효과 -> 작업 시간이 오래 걸리는 프로세스 때문에, 작업이 금방 끝나는 프로세스가 계속 지체됨, 입출력 작업이 요청되면,
cpu가 쉬는 시간이 많아져서 작업 효율이 떨어짐
sjf	대기 시간		반환 시간		평균 대기 시간
p1	0		30		(0+36+24)/3=20
p2	36		54
p3	24		33
sjf-> 아사 현상 -> 작업 시간이 오래 걸리는 프로세스는, 계속하여 뒤로 밀려나, 계속 할당이 지체됨 -> 에이징으로 해결 가능(자신의 순서를 양보할 때 마다
나이를 먹어, 어느 정도 양보했다면, cpu를 할당해주는 것)
hrn	대기 시간		반환 시간		평균 대기 시간
p1	0		30		(0+36+24)/3=20
p2	36		54
p3	24		33
hrn-> sjf의 아사 현상을 해결한 알고리즘 (CPU 사용시간 + 대기 시간)/(CPU 사용 시간)의 공식을 사용하여, 우선순위를 정하고, 이를 토대로 가장 우선 순위가
높은 순서로 스케줄링
p1이 끝난 시점의 p2와 p3의 우선순위를 비교하자면, p2 = (18+27)/18 = 2.5, p3 = (9+24)/9 = 3.6 -> p3의 우선순위가 더 크기 때문에, p3 우선적으로 할당
아사 현상을 완화하고, cpu 할당을 공평하게 하려고 한다는 점은 좋지만, 여전히 공평성이 위배된다
RR	대기 시간		반환 시간		평균 대기 시간  (타임 슬라이스 10)
p1	0+10+9+8	57		(27+26+14)/3=22.33
p2	7+9+10		44
p3	4+10		23	
RR(라운드 로빈):선점형 스케줄링, 타임슬라이스의 크기와 문맥 교환에 따른 시간을 잘 고려해야함, 따라서 타임 슬라이스의 크기를 최대한 작게 잡되, 
문맥 교환의 시간을 고려하여 적당하게 잡아야함
srt	대기 시간		반환 시간		평균 대기 시간
p1	0+9+10+8	57		(4+16+27)/3=15.66
p2	7+9		34
p3	4		13
srt:라운드 로빈을 기반으로 하되, 남은 작업 시간이 가장 적은 프로세스 먼저 처리하는 방식. 남은 시간을 주기적으로 계산하여야하고, 남은 시간이 더 적은
프로세스와 문맥 교환을 해야하므로, 또 다른 작업이 하나 추가가됨, 아사 현상도 발생하고, 프로세스 종료 시간을 예측하기 어려워, 잘 사용하지 않음
우선순위 스케줄링
우선순위를 두고, 우선순위가 높은 순으로 스케줄링. 선점형,비선점형 둘다 존재할 수 있고, 비선점형에선 SRT,HRN 등에서 사용 가능하고
선점형에선 srt에서 사용 가능
고정 우선순위, 변동 우선순위 존재. 고정은 구현 쉬우나, 상황 반영 어려움, 변동은 구현 어렵지만 효율적이게 가능
준비 큐에 있는 순서를 무시하고, 우선순위만 고려하기 때문에, 공평성이 위배되고, 아사 현상이 발생 가능하다.
프로세스의 우선순위를 매번 바꿔줘야하기 때문에 오버헤드 발생하여 시스템 효율성이 떨어진다
다단계 큐 스케줄링
우선순위에 따라 준비 큐를 여러개 사용하는 방식, 운영체제로부터 부여받은 우선순위에 따라 해당 우선순위 큐에 삽입(다중 큐)
고정형 우선순위 사용하고, 상단(우선순위 높은)큐의 작업이 다 끝나야 비로소 다음 우선순위 큐가 작업 가능
다단계 피드백 큐 스케줄링
베이스는 위와 동일하지만, 스케줄링이 진행됨에 따라 큐의 우선순위를 변동하여, 공평성을 더 챙기는 스케줄링
-> cpu할당을 한번 받을 때 프로세스의 우선순위를 낮추어, 우선순위가 낮은 프로세스의 실행이 연기되는걸 방지.
하지만 커널 프로세스는 아무리 낮아지더라도, 일반 프로세스부단 우위에 있음.
우선순위가 낮아질수록 cpu를 얻을 확률이 낮아지기 때문에, 낮은 우선순위일수록 타임 슬라이스를 길게 하여, 한번 할당 받을 때 최대한 많은 작업을 
할 수 있게 함. 이론상 마지막 큐에 있는 프로세스(가장 낮은 우선순위를 가지는) 는 무한대의 타임 슬라이스를 가짐
이 다단계 피드백 큐에서 마지막 큐에 있는 프로세스들은, fcfs 스케줄링 방식을 사용함

