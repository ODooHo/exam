windows 에 응용 프로그램을 만들면, 고유에 메모리 (주소)공간 을 할당해준다. 실제 그 주소에 메모리가 없을 수도 있다. (가짜, 가상 공간). 그럼 왜 쓰냐?
프로그램을 할 때 편함. 

-> cpu가 참조하는 "가상 주소를 주기억 장치의 실제 주소로 변환하는 주소 매핑"이 필요하다.

가상 주소를 보고 데이터를 가져와야 하는데, 데이터는 주기억장치에 있으니, 메모리 공간에 있다. 가상 주소를 보고 매핑표를 보고, 어디로 가야하는지 알아낸다. 이후 MAR (주기억 장치의 물리 주소, 15bit) 을 보고 주기억 장치에 access해서 MBR 로 감.


  ·주소 매핑
1. 가상 기억 장치의 매핑
  ·페이지에 의한 매핑
 -페이지: 주소 공간을 고정 크기로 나눈것 - 가상
 -블록: 메모리 공간을 고정 크기로 나눈 것 - 물리
주소 공간이 8K (2^3 * 2^10) = 13bit
메모리 공간 4K ( 2^2 * 2^10) = 12bit

가상 주소 페이지가 주기억 장치에 존재하지 않는 경우 (적재가 안된 경우, 이럴 경우 보조 기억 장치 (멀리) 까지 가야한다.) = "페이지 오류"
페이지 오류가 자주 발생하면 "스래싱"

	페이지에 의한 매핑
가상 주소:
|페이지 번호(p) | 변위(d) |
     001	              0 1 0 1 0 0 0 0 1 1

페이지 번호를 통해 001번으로 간다. 현존 비트를 확인해서 있음을 확인.
 
블록번호 + 현존 비트를 전달  =| 10 | 1 |
-> 물리 주소에 | 10 | 변위 | 를 그대로 씀


예제 6-13
용량이 1MB, 32bit의 가상 주소, 페이지 크기 1K워드, 1워드는 4byte

주소공간 페이지 크기 * 1워드 크기
2^10 * 2 ^ 2 = 2 ^ 12

주기억 장치 용량 1M / 페이지의 크기 (2^12) = 2^8개


	세그먼트에 의한 매핑 (대충 훑)
·NRU Not Used Recently

참조비트 | 변형비트 | 교체순서

 1	1 일 경우 제일 마지막에 해야함. 
0 	0 일 경우 제일 먼저 바꾼다...


	05 연관 기억 장치
: *기억 장치의 모든 단자를 동시에 읽어 주어진 특성과 비교. -> 주소로만 접근할때 보다 빠름

인자 레지스터는 n비트, 키 레지스터 n비트, 매치 레지스터는 m비트로 구성

